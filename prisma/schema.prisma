// This is your Prisma schema file for ProjecTory

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  projects      Project[]
  templates     Template[]
  settings      Json?
}

model User {
  id                String         @id @default(cuid())
  email            String         @unique
  name             String?
  role             UserRole       @default(USER)
  organizationId   String
  organization     Organization   @relation(fields: [organizationId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  projects         ProjectMember[]
  tasks           Task[]
  comments        Comment[]
  meetings        MeetingParticipant[]
  auditLogs       AuditLog[]
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  USER
  CLIENT
}

model Project {
  id              String         @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus  @default(ACTIVE)
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  members         ProjectMember[]
  tasks           Task[]
  meetings        Meeting[]
  documents       Document[]
  tags            Tag[]
  workflow        Workflow?
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  COMPLETED
  ON_HOLD
}

model ProjectMember {
  id          String    @id @default(cuid())
  userId      String
  projectId   String
  role        ProjectRole
  user        User      @relation(fields: [userId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, projectId])
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
  VIEWER
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      TaskStatus
  priority    Priority  @default(MEDIUM)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  assigneeId  String?
  assignee    User?     @relation(fields: [assigneeId], references: [id])
  dueDate     DateTime?
  startDate   DateTime?
  estimatedHours Float?
  actualHours    Float?
  parentId    String?
  parent      Task?     @relation("SubTasks", fields: [parentId], references: [id])
  subtasks    Task[]    @relation("SubTasks")
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        Tag[]
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Document {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  version     Int       @default(1)
  type        DocumentType
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  parentId    String?
  parent      Document? @relation("DocumentVersions", fields: [parentId], references: [id])
  versions    Document[] @relation("DocumentVersions")
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum DocumentType {
  SPECIFICATION
  MEETING_NOTES
  REPORT
  OTHER
}

model Template {
  id              String    @id @default(cuid())
  name            String
  description     String?
  content         String    @db.Text
  type            TemplateType
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum TemplateType {
  PROJECT
  DOCUMENT
  MEETING
  WORKFLOW
}

model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  participants MeetingParticipant[]
  notes       String?   @db.Text
  recordingUrl String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MeetingParticipant {
  id          String    @id @default(cuid())
  meetingId   String
  meeting     Meeting   @relation(fields: [meetingId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  status      ParticipantStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([meetingId, userId])
}

enum ParticipantStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id])
  documentId  String?
  document    Document? @relation(fields: [documentId], references: [id])
  parentId    String?
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id          String    @id @default(cuid())
  name        String
  color       String
  projects    Project[]
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name])
}

model Workflow {
  id          String    @id @default(cuid())
  name        String
  steps       Json
  projectId   String    @unique
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AuditLog {
  id          String    @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  metadata    Json?
  createdAt   DateTime  @default(now())
}